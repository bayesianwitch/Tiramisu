package com.chrisstucchio.tiramisu.utils

trait ResultSetWrapper extends java.sql.ResultSet {
  protected val rs: java.sql.ResultSet

  protected def methodWrap[T](f: =>T): T = f

  def absolute(x$1: Int): Boolean = rs.absolute(x$1)
  def afterLast(): Unit = rs.afterLast()
  def beforeFirst(): Unit = rs.beforeFirst()
  def cancelRowUpdates(): Unit = rs.cancelRowUpdates()
  def clearWarnings(): Unit = rs.clearWarnings()
  def close(): Unit = rs.close()
  def deleteRow(): Unit = rs.deleteRow()
  def findColumn(x$1: String): Int = rs.findColumn(x$1)
  def first(): Boolean = rs.first()
  def getArray(x$1: String): java.sql.Array = rs.getArray(x$1)
  def getArray(x$1: Int): java.sql.Array = rs.getArray(x$1)
  def getAsciiStream(x$1: String): java.io.InputStream = rs.getAsciiStream(x$1)
  def getAsciiStream(x$1: Int): java.io.InputStream = rs.getAsciiStream(x$1)
  def getBigDecimal(x$1: String): java.math.BigDecimal = rs.getBigDecimal(x$1)
  def getBigDecimal(x$1: Int): java.math.BigDecimal = rs.getBigDecimal(x$1)
  def getBigDecimal(x$1: String,x$2: Int): java.math.BigDecimal = rs.getBigDecimal(x$1, x$2)
  def getBigDecimal(x$1: Int,x$2: Int): java.math.BigDecimal = rs.getBigDecimal(x$1, x$2)
  def getBinaryStream(x$1: String): java.io.InputStream = rs.getBinaryStream(x$1)
  def getBinaryStream(x$1: Int): java.io.InputStream = rs.getBinaryStream(x$1)
  def getBlob(x$1: String): java.sql.Blob = rs.getBlob(x$1)
  def getBlob(x$1: Int): java.sql.Blob = rs.getBlob(x$1)
  def getBoolean(x$1: String): Boolean = rs.getBoolean(x$1)
  def getBoolean(x$1: Int): Boolean = rs.getBoolean(x$1)
  def getByte(x$1: String): Byte = rs.getByte(x$1)
  def getByte(x$1: Int): Byte = rs.getByte(x$1)
  def getBytes(x$1: String): Array[Byte] = rs.getBytes(x$1)
  def getBytes(x$1: Int): Array[Byte] = rs.getBytes(x$1)
  def getCharacterStream(x$1: String): java.io.Reader = rs.getCharacterStream(x$1)
  def getCharacterStream(x$1: Int): java.io.Reader = rs.getCharacterStream(x$1)
  def getClob(x$1: String): java.sql.Clob = rs.getClob(x$1)
  def getClob(x$1: Int): java.sql.Clob = rs.getClob(x$1)
  def getConcurrency(): Int = rs.getConcurrency()
  def getCursorName(): String = rs.getCursorName()
  def getDate(x$1: String,x$2: java.util.Calendar): java.sql.Date = rs.getDate(x$1,x$2)
  def getDate(x$1: Int,x$2: java.util.Calendar): java.sql.Date = rs.getDate(x$1,x$2)
  def getDate(x$1: String): java.sql.Date = rs.getDate(x$1)
  def getDate(x$1: Int): java.sql.Date = rs.getDate(x$1)
  def getDouble(x$1: String): Double = rs.getDouble(x$1)
  def getDouble(x$1: Int): Double = rs.getDouble(x$1)
  def getFetchDirection(): Int = rs.getFetchDirection()
  def getFetchSize(): Int = rs.getFetchSize()
  def getFloat(x$1: String): Float = rs.getFloat(x$1)
  def getFloat(x$1: Int): Float = rs.getFloat(x$1)
  def getHoldability(): Int = rs.getHoldability()
  def getInt(x$1: String): Int = rs.getInt(x$1)
  def getInt(x$1: Int): Int = rs.getInt(x$1)
  def getLong(x$1: String): Long = rs.getLong(x$1)
  def getLong(x$1: Int): Long = rs.getLong(x$1)
  def getMetaData(): java.sql.ResultSetMetaData = rs.getMetaData()
  def getNCharacterStream(x$1: String): java.io.Reader = rs.getNCharacterStream(x$1)
  def getNCharacterStream(x$1: Int): java.io.Reader = rs.getNCharacterStream(x$1)
  def getNClob(x$1: String): java.sql.NClob = rs.getNClob(x$1)
  def getNClob(x$1: Int): java.sql.NClob = rs.getNClob(x$1)
  def getNString(x$1: String): String = rs.getNString(x$1)
  def getNString(x$1: Int): String = rs.getNString(x$1)
  def getObject[T](x$1: String,x$2: Class[T]): T = rs.getObject(x$1,x$2)
  def getObject[T](x$1: Int,x$2: Class[T]): T = rs.getObject(x$1,x$2)
  def getObject(x$1: String,x$2: java.util.Map[String,Class[_]]): Object = rs.getObject(x$1,x$2)
  def getObject(x$1: Int,x$2: java.util.Map[String,Class[_]]): Object = rs.getObject(x$1,x$2)
  def getObject(x$1: String): Object = rs.getObject(x$1)
  def getObject(x$1: Int): Object = rs.getObject(x$1)
  def getRef(x$1: String): java.sql.Ref = rs.getRef(x$1)
  def getRef(x$1: Int): java.sql.Ref = rs.getRef(x$1)
  def getRow(): Int = rs.getRow()
  def getRowId(x$1: String): java.sql.RowId = rs.getRowId(x$1)
  def getRowId(x$1: Int): java.sql.RowId = rs.getRowId(x$1)
  def getSQLXML(x$1: String): java.sql.SQLXML = rs.getSQLXML(x$1)
  def getSQLXML(x$1: Int): java.sql.SQLXML = rs.getSQLXML(x$1)
  def getShort(x$1: String): Short = rs.getShort(x$1)
  def getShort(x$1: Int): Short = rs.getShort(x$1)
  def getStatement(): java.sql.Statement = rs.getStatement()
  def getString(x$1: String): String = rs.getString(x$1)
  def getString(x$1: Int): String = rs.getString(x$1)
  def getTime(x$1: String,x$2: java.util.Calendar): java.sql.Time = rs.getTime(x$1,x$2)
  def getTime(x$1: Int,x$2: java.util.Calendar): java.sql.Time = rs.getTime(x$1,x$2)
  def getTime(x$1: String): java.sql.Time = rs.getTime(x$1)
  def getTime(x$1: Int): java.sql.Time = rs.getTime(x$1)
  def getTimestamp(x$1: String,x$2: java.util.Calendar): java.sql.Timestamp = rs.getTimestamp(x$1,x$2)
  def getTimestamp(x$1: Int,x$2: java.util.Calendar): java.sql.Timestamp = rs.getTimestamp(x$1,x$2)
  def getTimestamp(x$1: String): java.sql.Timestamp = rs.getTimestamp(x$1)
  def getTimestamp(x$1: Int): java.sql.Timestamp = rs.getTimestamp(x$1)
  def getType(): Int = rs.getType()
  def getURL(x$1: String): java.net.URL = rs.getURL(x$1)
  def getURL(x$1: Int): java.net.URL = rs.getURL(x$1)
  def getUnicodeStream(x$1: String): java.io.InputStream = rs.getUnicodeStream(x$1)
  def getUnicodeStream(x$1: Int): java.io.InputStream = rs.getUnicodeStream(x$1)
  def getWarnings(): java.sql.SQLWarning = rs.getWarnings()
  def insertRow(): Unit = rs.insertRow()
  def isAfterLast(): Boolean = rs.isAfterLast()
  def isBeforeFirst(): Boolean = rs.isBeforeFirst()
  def isClosed(): Boolean = rs.isClosed()
  def isFirst(): Boolean = rs.isFirst()
  def isLast(): Boolean = rs.isLast()
  def last(): Boolean = rs.last()
  def moveToCurrentRow(): Unit = rs.moveToCurrentRow()
  def moveToInsertRow(): Unit = rs.moveToInsertRow()
  def next(): Boolean = rs.next()
  def previous(): Boolean = rs.previous()
  def refreshRow(): Unit = rs.refreshRow()
  def relative(x$1: Int): Boolean = rs.relative(x$1)
  def rowDeleted(): Boolean = rs.rowDeleted()
  def rowInserted(): Boolean = rs.rowInserted()
  def rowUpdated(): Boolean = rs.rowUpdated()
  def setFetchDirection(x$1: Int): Unit = rs.setFetchDirection(x$1)
  def setFetchSize(x$1: Int): Unit = rs.setFetchSize(x$1)
  def updateArray(x$1: String,x$2: java.sql.Array): Unit = rs.updateArray(x$1,x$2)
  def updateArray(x$1: Int,x$2: java.sql.Array): Unit = rs.updateArray(x$1,x$2)
  def updateAsciiStream(x$1: String,x$2: java.io.InputStream): Unit = rs.updateAsciiStream(x$1,x$2)
  def updateAsciiStream(x$1: Int,x$2: java.io.InputStream): Unit = rs.updateAsciiStream(x$1,x$2)
  def updateAsciiStream(x$1: String,x$2: java.io.InputStream,x$3: Long): Unit = rs.updateAsciiStream(x$1,x$2,x$3)
  def updateAsciiStream(x$1: Int,x$2: java.io.InputStream,x$3: Long): Unit = rs.updateAsciiStream(x$1,x$2,x$3)
  def updateAsciiStream(x$1: String,x$2: java.io.InputStream,x$3: Int): Unit = rs.updateAsciiStream(x$1,x$2,x$3)
  def updateAsciiStream(x$1: Int,x$2: java.io.InputStream,x$3: Int): Unit = rs.updateAsciiStream(x$1,x$2,x$3)
  def updateBigDecimal(x$1: String,x$2: java.math.BigDecimal): Unit = rs.updateBigDecimal(x$1,x$2)
  def updateBigDecimal(x$1: Int,x$2: java.math.BigDecimal): Unit = rs.updateBigDecimal(x$1,x$2)
  def updateBinaryStream(x$1: String,x$2: java.io.InputStream): Unit = rs.updateBinaryStream(x$1,x$2)
  def updateBinaryStream(x$1: Int,x$2: java.io.InputStream): Unit = rs.updateBinaryStream(x$1,x$2)
  def updateBinaryStream(x$1: String,x$2: java.io.InputStream,x$3: Long): Unit = rs.updateBinaryStream(x$1,x$2,x$3)
  def updateBinaryStream(x$1: Int,x$2: java.io.InputStream,x$3: Long): Unit = rs.updateBinaryStream(x$1,x$2,x$3)
  def updateBinaryStream(x$1: String,x$2: java.io.InputStream,x$3: Int): Unit = rs.updateBinaryStream(x$1,x$2,x$3)
  def updateBinaryStream(x$1: Int,x$2: java.io.InputStream,x$3: Int): Unit = rs.updateBinaryStream(x$1,x$2,x$3)
  def updateBlob(x$1: String,x$2: java.io.InputStream): Unit = rs.updateBlob(x$1,x$2)
  def updateBlob(x$1: Int,x$2: java.io.InputStream): Unit = rs.updateBlob(x$1,x$2)
  def updateBlob(x$1: String,x$2: java.io.InputStream,x$3: Long): Unit = rs.updateBlob(x$1,x$2,x$3)
  def updateBlob(x$1: Int,x$2: java.io.InputStream,x$3: Long): Unit = rs.updateBlob(x$1,x$2,x$3)
  def updateBlob(x$1: String,x$2: java.sql.Blob): Unit = rs.updateBlob(x$1,x$2)
  def updateBlob(x$1: Int,x$2: java.sql.Blob): Unit = rs.updateBlob(x$1,x$2)
  def updateBoolean(x$1: String,x$2: Boolean): Unit = rs.updateBoolean(x$1,x$2)
  def updateBoolean(x$1: Int,x$2: Boolean): Unit = rs.updateBoolean(x$1,x$2)
  def updateByte(x$1: String,x$2: Byte): Unit = rs.updateByte(x$1,x$2)
  def updateByte(x$1: Int,x$2: Byte): Unit = rs.updateByte(x$1,x$2)
  def updateBytes(x$1: String,x$2: Array[Byte]): Unit = rs.updateBytes(x$1,x$2)
  def updateBytes(x$1: Int,x$2: Array[Byte]): Unit = rs.updateBytes(x$1,x$2)
  def updateCharacterStream(x$1: String,x$2: java.io.Reader): Unit = rs.updateCharacterStream(x$1,x$2)
  def updateCharacterStream(x$1: Int,x$2: java.io.Reader): Unit = rs.updateCharacterStream(x$1,x$2)
  def updateCharacterStream(x$1: String,x$2: java.io.Reader,x$3: Long): Unit = rs.updateCharacterStream(x$1,x$2,x$3)
  def updateCharacterStream(x$1: Int,x$2: java.io.Reader,x$3: Long): Unit = rs.updateCharacterStream(x$1,x$2,x$3)
  def updateCharacterStream(x$1: String,x$2: java.io.Reader,x$3: Int): Unit = rs.updateCharacterStream(x$1,x$2,x$3)
  def updateCharacterStream(x$1: Int,x$2: java.io.Reader,x$3: Int): Unit = rs.updateCharacterStream(x$1,x$2,x$3)
  def updateClob(x$1: String,x$2: java.io.Reader): Unit = rs.updateClob(x$1,x$2)
  def updateClob(x$1: Int,x$2: java.io.Reader): Unit = rs.updateClob(x$1,x$2)
  def updateClob(x$1: String,x$2: java.io.Reader,x$3: Long): Unit = rs.updateClob(x$1,x$2,x$3)
  def updateClob(x$1: Int,x$2: java.io.Reader,x$3: Long): Unit = rs.updateClob(x$1,x$2,x$3)
  def updateClob(x$1: String,x$2: java.sql.Clob): Unit = rs.updateClob(x$1,x$2)
  def updateClob(x$1: Int,x$2: java.sql.Clob): Unit = rs.updateClob(x$1,x$2)
  def updateDate(x$1: String,x$2: java.sql.Date): Unit = rs.updateDate(x$1,x$2)
  def updateDate(x$1: Int,x$2: java.sql.Date): Unit = rs.updateDate(x$1,x$2)
  def updateDouble(x$1: String,x$2: Double): Unit = rs.updateDouble(x$1,x$2)
  def updateDouble(x$1: Int,x$2: Double): Unit = rs.updateDouble(x$1,x$2)
  def updateFloat(x$1: String,x$2: Float): Unit = rs.updateFloat(x$1,x$2)
  def updateFloat(x$1: Int,x$2: Float): Unit = rs.updateFloat(x$1,x$2)
  def updateInt(x$1: String,x$2: Int): Unit = rs.updateInt(x$1,x$2)
  def updateInt(x$1: Int,x$2: Int): Unit = rs.updateInt(x$1,x$2)
  def updateLong(x$1: String,x$2: Long): Unit = rs.updateLong(x$1,x$2)
  def updateLong(x$1: Int,x$2: Long): Unit = rs.updateLong(x$1,x$2)
  def updateNCharacterStream(x$1: String,x$2: java.io.Reader): Unit = rs.updateNCharacterStream(x$1,x$2)
  def updateNCharacterStream(x$1: Int,x$2: java.io.Reader): Unit = rs.updateNCharacterStream(x$1,x$2)
  def updateNCharacterStream(x$1: String,x$2: java.io.Reader,x$3: Long): Unit = rs.updateNCharacterStream(x$1,x$2,x$3)
  def updateNCharacterStream(x$1: Int,x$2: java.io.Reader,x$3: Long): Unit = rs.updateNCharacterStream(x$1,x$2,x$3)
  def updateNClob(x$1: String,x$2: java.io.Reader): Unit = rs.updateNClob(x$1,x$2)
  def updateNClob(x$1: Int,x$2: java.io.Reader): Unit = rs.updateNClob(x$1,x$2)
  def updateNClob(x$1: String,x$2: java.io.Reader,x$3: Long): Unit = rs.updateNClob(x$1,x$2,x$3)
  def updateNClob(x$1: Int,x$2: java.io.Reader,x$3: Long): Unit = rs.updateNClob(x$1,x$2,x$3)
  def updateNClob(x$1: String,x$2: java.sql.NClob): Unit = rs.updateNClob(x$1,x$2)
  def updateNClob(x$1: Int,x$2: java.sql.NClob): Unit = rs.updateNClob(x$1,x$2)
  def updateNString(x$1: String,x$2: String): Unit = rs.updateNString(x$1,x$2)
  def updateNString(x$1: Int,x$2: String): Unit = rs.updateNString(x$1,x$2)
  def updateNull(x$1: String): Unit = rs.updateNull(x$1)
  def updateNull(x$1: Int): Unit = rs.updateNull(x$1)
  def updateObject(x$1: String,x$2: Any): Unit = rs.updateObject(x$1,x$2)
  def updateObject(x$1: String,x$2: Any,x$3: Int): Unit = rs.updateObject(x$1,x$2,x$3)
  def updateObject(x$1: Int,x$2: Any): Unit = rs.updateObject(x$1,x$2)
  def updateObject(x$1: Int,x$2: Any,x$3: Int): Unit = rs.updateObject(x$1,x$2,x$3)
  def updateRef(x$1: String,x$2: java.sql.Ref): Unit = rs.updateRef(x$1,x$2)
  def updateRef(x$1: Int,x$2: java.sql.Ref): Unit = rs.updateRef(x$1,x$2)
  def updateRow(): Unit = rs.updateRow()
  def updateRowId(x$1: String,x$2: java.sql.RowId): Unit = rs.updateRowId(x$1,x$2)
  def updateRowId(x$1: Int,x$2: java.sql.RowId): Unit = rs.updateRowId(x$1,x$2)
  def updateSQLXML(x$1: String,x$2: java.sql.SQLXML): Unit = rs.updateSQLXML(x$1,x$2)
  def updateSQLXML(x$1: Int,x$2: java.sql.SQLXML): Unit = rs.updateSQLXML(x$1,x$2)
  def updateShort(x$1: String,x$2: Short): Unit = rs.updateShort(x$1,x$2)
  def updateShort(x$1: Int,x$2: Short): Unit = rs.updateShort(x$1,x$2)
  def updateString(x$1: String,x$2: String): Unit = rs.updateString(x$1,x$2)
  def updateString(x$1: Int,x$2: String): Unit = rs.updateString(x$1,x$2)
  def updateTime(x$1: String,x$2: java.sql.Time): Unit = rs.updateTime(x$1,x$2)
  def updateTime(x$1: Int,x$2: java.sql.Time): Unit = rs.updateTime(x$1,x$2)
  def updateTimestamp(x$1: String,x$2: java.sql.Timestamp): Unit = rs.updateTimestamp(x$1,x$2)
  def updateTimestamp(x$1: Int,x$2: java.sql.Timestamp): Unit = rs.updateTimestamp(x$1,x$2)
  def wasNull(): Boolean = rs.wasNull()

  def isWrapperFor(x$1: Class[_]): Boolean = rs.isWrapperFor(x$1)
  def unwrap[T](x$1: Class[T]): T = rs.unwrap(x$1)
}
